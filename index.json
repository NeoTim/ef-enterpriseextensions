{
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers.AuditTrailController-2.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers.AuditTrailController-2.html",
    "title": "Class AuditTrailController<T, TEntity> | Entity Framework Enterprise Extensions",
    "keywords": "Class AuditTrailController<T, TEntity> Represents an AuditTrail controller Inheritance System.Object BusinessRulesController <T> AuditTrailController<T, TEntity> Inherited Members BusinessRulesController<T>.Context BusinessRulesController<T>.RunBusinessRules() BusinessRulesController<T>.GetEntityType(Object) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers Assembly : cs.temp.dll.dll Syntax public class AuditTrailController<T, TEntity> : BusinessRulesController<T>, IBusinessRulesController where T : DbContext Type Parameters Name Description T TEntity Constructors AuditTrailController(T, String) Instances a new controller Declaration public AuditTrailController(T context, string currentUserId) Parameters Type Name Description T context System.String currentUserId Methods AddTypes(ActionFlags, Type) Add type to action Declaration public void AddTypes(ActionFlags action, Type type) Parameters Type Name Description ActionFlags action System.Type type AddTypes(ActionFlags, Type[]) Adds types to action Declaration public void AddTypes(ActionFlags action, Type[] types) Parameters Type Name Description ActionFlags action System.Type [] types OnEntityCreated(Object) Method to catch new entities Declaration public virtual void OnEntityCreated(object entity) Parameters Type Name Description System.Object entity OnEntityDeleted(Object) Method to catch deleted entities Declaration public virtual void OnEntityDeleted(object entity) Parameters Type Name Description System.Object entity OnEntityUpdated(Object) Method to catch modified entities Declaration public virtual void OnEntityUpdated(object entity) Parameters Type Name Description System.Object entity"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers.html",
    "title": "Namespace Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers | Entity Framework Enterprise Extensions",
    "keywords": "Namespace Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers Classes AuditTrailController<T, TEntity> Represents an AuditTrail controller FluentAuditTrailExtension Extension methods"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.IBusinessDbContext.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.IBusinessDbContext.html",
    "title": "Interface IBusinessDbContext | Entity Framework Enterprise Extensions",
    "keywords": "Interface IBusinessDbContext Creates a new DbContext with support to run BusinessControllers Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public interface IBusinessDbContext Methods AddController(IBusinessRulesController) Adds a new BusinessController to the DbContext Declaration void AddController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller ContainsController(IBusinessRulesController) Checks if a BusinessController exists Declaration bool ContainsController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller Returns Type Description System.Boolean RemoveController(IBusinessRulesController) Removes a new BusinessController to the DbContext Declaration void RemoveController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.IdentityBusinessDbContext.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.IdentityBusinessDbContext.html",
    "title": "Class IdentityBusinessDbContext | Entity Framework Enterprise Extensions",
    "keywords": "Class IdentityBusinessDbContext Creates a new IdentityDbContext with support to run BusinessControllers Inheritance System.Object IdentityBusinessDbContext < IdentityUser > IdentityBusinessDbContext Inherited Members IdentityBusinessDbContext<IdentityUser>.AddController(IBusinessRulesController) IdentityBusinessDbContext<IdentityUser>.RemoveController(IBusinessRulesController) IdentityBusinessDbContext<IdentityUser>.ContainsController(IBusinessRulesController) IdentityBusinessDbContext<IdentityUser>.SaveChanges() IdentityBusinessDbContext<IdentityUser>.SaveChangesAsync() IdentityBusinessDbContext<IdentityUser>.SaveChangesAsync(CancellationToken) Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public abstract class IdentityBusinessDbContext : IdentityBusinessDbContext<IdentityUser>, IBusinessDbContext"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.JobBase-2.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.JobBase-2.html",
    "title": "Class JobBase<TDbContext, TParam> | Entity Framework Enterprise Extensions",
    "keywords": "Class JobBase<TDbContext, TParam> Creates a job with multiple running options Inheritance System.Object JobBase<TDbContext, TParam> JobBase<TDbContext> SingletonJobBase<T, TDbContext, TParam> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public abstract class JobBase<TDbContext, TParam> where TDbContext : IBusinessDbContext where TParam : class Type Parameters Name Description TDbContext The DbContext type, it must inherent IBusinessDbContext TParam The job input parameter type Constructors JobBase() Invalid constructor, you must call the constructor with parameters Declaration protected JobBase() JobBase(TDbContext) Creates a new Job, you should call this constructor from base method in your implementation class Declaration protected JobBase(TDbContext context) Parameters Type Name Description TDbContext context Fields Context The BusinessDbContext instance Declaration protected readonly TDbContext Context Field Value Type Description TDbContext Properties EndDate The Job last execution End Date Declaration public DateTime? EndDate { get; set; } Property Value Type Description System.Nullable < DateTime > IsRunning Check if it's running Declaration public virtual bool IsRunning { get; protected set; } Property Value Type Description System.Boolean StartDate The Job execution Start Date Declaration public DateTime? StartDate { get; set; } Property Value Type Description System.Nullable < DateTime > Methods BackgroundCondition() Defines the condition to run job in background Declaration protected abstract bool BackgroundCondition() Returns Type Description System.Boolean DoWork(TParam, CancellationToken) The job work task Declaration protected abstract Task DoWork(TParam argument, CancellationToken ct) Parameters Type Name Description TParam argument The argument. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task Run(TParam) Runs the job if it isn't running Declaration public bool Run(TParam argument) Parameters Type Name Description TParam argument Returns Type Description System.Boolean RunAsync(TParam, CancellationToken) Executes the job, you shouldn't call this method directly Declaration public Task RunAsync(TParam argument, CancellationToken ct = null) Parameters Type Name Description TParam argument The argument. System.Threading.CancellationToken ct The cancellation token. Returns Type Description System.Threading.Tasks.Task RunBackgroundWork(CancellationToken, TParam) Runs the job as a BackgroundWorker with default idle time of 1 minute Declaration public void RunBackgroundWork(CancellationToken ct = null, TParam argument = null) Parameters Type Name Description System.Threading.CancellationToken ct TParam argument RunBackgroundWork(CancellationToken, TimeSpan, TParam) Runs the job as a BackgroundWorker Declaration public void RunBackgroundWork(CancellationToken ct, TimeSpan idleTime, TParam argument = null) Parameters Type Name Description System.Threading.CancellationToken ct TimeSpan idleTime TParam argument"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.ObjectModel.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.ObjectModel.html",
    "title": "Namespace Unosquare.Labs.EntityFramework.EnterpriseExtensions.ObjectModel | Entity Framework Enterprise Extensions",
    "keywords": "Namespace Unosquare.Labs.EntityFramework.EnterpriseExtensions.ObjectModel Interfaces IAuditTrailEntry Represents an AuditTrail Entry"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.html",
    "title": "Namespace Unosquare.Labs.EntityFramework.EnterpriseExtensions | Entity Framework Enterprise Extensions",
    "keywords": "Namespace Unosquare.Labs.EntityFramework.EnterpriseExtensions Classes BusinessDbContext Creates a new DbContext with support to run BusinessControllers BusinessRuleAttribute Decorate methods with this attribute to execute business rules that match the following signature: public void MethodName(T entity) BusinessRulesController<T> Provides a base implementation of a business rules controller class Decorate methods in a derived class with the BusinessRuleAttribute to execute business rules for the given entity types IdentityBusinessDbContext Creates a new IdentityDbContext with support to run BusinessControllers IdentityBusinessDbContext<TUser> Creates a new IdentityDbContext with support to run BusinessControllers JobBase<TDbContext> Creates a job with multiple running options JobBase<TDbContext, TParam> Creates a job with multiple running options SingletonJobBase<T, TDbContext> SingletonJobBase<T, TDbContext, TParam> Interfaces IBusinessDbContext Creates a new DbContext with support to run BusinessControllers IBusinessRulesController Represents a Business Rules Controller Enums ActionFlags Defines a combination of actions in a CRUD pattern"
  },
  "README.html": {
    "href": "README.html",
    "title": "ef-enterpriseextensions | Entity Framework Enterprise Extensions",
    "keywords": "ef-enterpriseextensions Unosquare Labs EntityFramework.EnterpriseExtensions Library contains a set of useful helpers and classes to common tasks related to process and data manipulation in enterprise applications. NuGet Installation: PM> Install-Package Unosquare.EntityFramework.EnterpriseExtensions or PM> Install-Package Unosquare.Identity.EntityFramework.EnterpriseExtensions if you are using Identity Entity Framework. Usage First you need to change your DbContext or IdentityDbContext to BusinessDbContext or IdentityBusinessDbContext respectly and you can attach Business Controllers to your DbContext in the constructor. They will execute before anytime you call SaveChanges method. The controllers require to specified a BusinessRuleAttribute to identify what CRUD action and which Entity types will be processed. EF Enterprise Extensions includes a JobBase abstract class (with a singleton extension named SingletonJobBase ), so you can build business jobs easily. Check the Sample app. Business Rules - Audit Trail Audit Trails is a task to save the changes to any operation perform in a record. In other words, capture what change between any data saving. This operation is important in many system and you can accomplish with these extensions easily. The AuditTrailController can be attached to your BusinessDbContext and setup which Entities will be recorded in the three CRUD actions supported, create, update and delete. To start using the AuditTrailController you need to specify a table where the Audit Trail data will be, you should implement the IAuditTrailEntry interface in your entity, for example: public class AuditTrailEntry : IAuditTrailEntry { [Key] public int AuditId { get; set; } public string UserId { get; set; } public string TableName { get; set; } public int Action { get; set; } public string JsonBody { get; set; } public DateTime DateCreated { get; set; } } Since you need to know who change the data, you need to construct your DataContext with the user relation. For example in Web API you can send the UserId from the request in the DataContext constructor. The AuditTrailController requires two parameters, the DbContext instance and a string to identify the user, and two type parameters, the DbContext type and the AudiTrailEntry type. You can call the extension method UseAuditTrail to add the Business Controller to your Business DataContext. public class SampleDb : BusinessDbContext { public string UserId { get; set; } public SampleDb(DbConnection connection, string userid) : base(connection, true) { UserId = userid; this.UseAuditTrail<SampleDb, AuditTrailEntry>(userid); } public DbSet<AuditTrailEntry> AuditTrailEntrys { get; set; } public DbSet<Order> Orders { get; set; } public DbSet<OrderDetail> OrderDetails { get; set; } public DbSet<Product> Products { get; set; } } By default, all the entities will be audited, you can access to the Audit Trail controller and set up the action-types relation with the method AddTypes . All the data is stored as a JSON string. You can use this Business Controller or you can create your own and probably change to serialize the data change in XML or every property in one database record. Jobs The Jobs are wrapper to your tasks. They can run in single instance (singletons with SingletonJobBase ) or with multiple executions using JobBase . You can execute them in your ASP.NET applications (WebApi too) using the HostingEnvironment.QueueBackgroundWorkItem method in .NET 4.6 and setup your execution condition with a datetime or a flag. To begin using this Jobs, you need to create a class and inherent from SingletonJobBase or JobBase and fill the implementation methods. The jobs exposes three executions modes: Run - The simple non-async way to execute the task. You can provide your own ThreadPool or mechanism to execute them. Returns true if the task was executed. RunAsync - An awaitable method to run your task. RunBackgroundWork - The ideal method to keep a scheduled task, with an optional idle timespan. You can use this method with HostingEnvironment.QueueBackgroundWorkItem and your BackgroundCondition method to generate a cron-like system in your OWIN application."
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.ObjectModel.IAuditTrailEntry.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.ObjectModel.IAuditTrailEntry.html",
    "title": "Interface IAuditTrailEntry | Entity Framework Enterprise Extensions",
    "keywords": "Interface IAuditTrailEntry Represents an AuditTrail Entry Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions.ObjectModel Assembly : cs.temp.dll.dll Syntax public interface IAuditTrailEntry Properties Action The action Declaration int Action { get; set; } Property Value Type Description System.Int32 DateCreated Creation date Declaration DateTime DateCreated { get; set; } Property Value Type Description DateTime JsonBody AuditTrail data in JSON Declaration string JsonBody { get; set; } Property Value Type Description System.String TableName The table's name Declaration string TableName { get; set; } Property Value Type Description System.String UserId The user identifier Declaration string UserId { get; set; } Property Value Type Description System.String"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.SingletonJobBase-2.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.SingletonJobBase-2.html",
    "title": "Class SingletonJobBase<T, TDbContext> | Entity Framework Enterprise Extensions",
    "keywords": "Class SingletonJobBase<T, TDbContext> Inheritance System.Object JobBase <TDbContext, System.Object > SingletonJobBase <T, TDbContext, System.Object > SingletonJobBase<T, TDbContext> Inherited Members SingletonJobBase<T, TDbContext, Object>._instance SingletonJobBase<T, TDbContext, Object>.Dispose() SingletonJobBase<T, TDbContext, Object>.Dispose(Boolean) SingletonJobBase<T, TDbContext, Object>.Instance JobBase<TDbContext, Object>.Context JobBase<TDbContext, Object>.IsRunning JobBase<TDbContext, Object>.DoWork(Object, CancellationToken) JobBase<TDbContext, Object>.BackgroundCondition() JobBase<TDbContext, Object>.RunBackgroundWork(CancellationToken, TimeSpan, Object) JobBase<TDbContext, Object>.RunBackgroundWork(CancellationToken, Object) JobBase<TDbContext, Object>.StartDate JobBase<TDbContext, Object>.EndDate JobBase<TDbContext, Object>.Run(Object) JobBase<TDbContext, Object>.RunAsync(Object, CancellationToken) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public abstract class SingletonJobBase<T, TDbContext> : SingletonJobBase<T, TDbContext, object>, IDisposable where T : class where TDbContext : IBusinessDbContext Type Parameters Name Description T TDbContext Constructors SingletonJobBase(TDbContext) Declaration protected SingletonJobBase(TDbContext context) Parameters Type Name Description TDbContext context"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.SingletonJobBase-3.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.SingletonJobBase-3.html",
    "title": "Class SingletonJobBase<T, TDbContext, TParam> | Entity Framework Enterprise Extensions",
    "keywords": "Class SingletonJobBase<T, TDbContext, TParam> Inheritance System.Object JobBase <TDbContext, TParam> SingletonJobBase<T, TDbContext, TParam> SingletonJobBase<T, TDbContext> Inherited Members JobBase<TDbContext, TParam>.Context JobBase<TDbContext, TParam>.IsRunning JobBase<TDbContext, TParam>.DoWork(TParam, CancellationToken) JobBase<TDbContext, TParam>.BackgroundCondition() JobBase<TDbContext, TParam>.RunBackgroundWork(CancellationToken, TimeSpan, TParam) JobBase<TDbContext, TParam>.RunBackgroundWork(CancellationToken, TParam) JobBase<TDbContext, TParam>.StartDate JobBase<TDbContext, TParam>.EndDate JobBase<TDbContext, TParam>.Run(TParam) JobBase<TDbContext, TParam>.RunAsync(TParam, CancellationToken) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public abstract class SingletonJobBase<T, TDbContext, TParam> : JobBase<TDbContext, TParam>, IDisposable where T : class where TDbContext : IBusinessDbContext where TParam : class Type Parameters Name Description T TDbContext TParam Constructors SingletonJobBase(TDbContext) Creates a new Job, you should call this constructor from base method in your implementation class Declaration protected SingletonJobBase(TDbContext context) Parameters Type Name Description TDbContext context Fields _instance The static, singleton instance reference. Declaration protected static T _instance Field Value Type Description T Properties Instance Gets the instance that this singleton represents. If the instance is null, it is constructed ans assigned when this member is accessed. Declaration public static T Instance { get; protected set; } Property Value Type Description T The instance. Methods Dispose() Disposes the job Declaration public void Dispose() Dispose(Boolean) Disposes the job Declaration protected virtual void Dispose(bool disposeManaged) Parameters Type Name Description System.Boolean disposeManaged"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.ActionFlags.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.ActionFlags.html",
    "title": "Enum ActionFlags | Entity Framework Enterprise Extensions",
    "keywords": "Enum ActionFlags Defines a combination of actions in a CRUD pattern Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public enum ActionFlags Fields Name Description Create Create action Delete Delete action None None action Update Update action"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.BusinessDbContext.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.BusinessDbContext.html",
    "title": "Class BusinessDbContext | Entity Framework Enterprise Extensions",
    "keywords": "Class BusinessDbContext Creates a new DbContext with support to run BusinessControllers Inheritance System.Object BusinessDbContext Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public abstract class BusinessDbContext : DbContext, IBusinessDbContext Constructors BusinessDbContext() Instances a new DbContext Declaration protected BusinessDbContext() BusinessDbContext(DbConnection, Boolean) Instances a new DbContext with a DbConnection Declaration protected BusinessDbContext(DbConnection dbConnection, bool contextOwnsConnection) Parameters Type Name Description DbConnection dbConnection System.Boolean contextOwnsConnection BusinessDbContext(String) Instances a new DbContext with a connection name Declaration protected BusinessDbContext(string connectionName) Parameters Type Name Description System.String connectionName Methods AddController(IBusinessRulesController) Adds a new BusinessController to the DbContext Declaration public void AddController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller Implements IBusinessDbContext.AddController(IBusinessRulesController) ContainsController(IBusinessRulesController) Checks if a BusinessController exists Declaration public bool ContainsController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller Returns Type Description System.Boolean Implements IBusinessDbContext.ContainsController(IBusinessRulesController) RemoveController(IBusinessRulesController) Removes a new BusinessController to the DbContext Declaration public void RemoveController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller Implements IBusinessDbContext.RemoveController(IBusinessRulesController) SaveChanges() Save Changes and run all the business controllers Declaration public override int SaveChanges() Returns Type Description System.Int32 SaveChangesAsync() Save Changes Async and run all the business controllers Declaration public override Task<int> SaveChangesAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > SaveChangesAsync(CancellationToken) Save Changes Async and run all the business controllers Declaration public override Task<int> SaveChangesAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 >"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.BusinessRulesController-1.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.BusinessRulesController-1.html",
    "title": "Class BusinessRulesController<T> | Entity Framework Enterprise Extensions",
    "keywords": "Class BusinessRulesController<T> Provides a base implementation of a business rules controller class Decorate methods in a derived class with the BusinessRuleAttribute to execute business rules for the given entity types Inheritance System.Object BusinessRulesController<T> AuditTrailController<T, TEntity> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public abstract class BusinessRulesController<T> : IBusinessRulesController where T : DbContext Type Parameters Name Description T Constructors BusinessRulesController(T) Initializes a new instance of the BusinessRulesController<T> class. Declaration protected BusinessRulesController(T context) Parameters Type Name Description T context The context. Properties Context Gets or sets the context. Declaration public T Context { get; protected set; } Property Value Type Description T The context. Methods GetEntityType(Object) Returns the entity type Declaration public Type GetEntityType(object entity) Parameters Type Name Description System.Object entity Returns Type Description System.Type RunBusinessRules() Handles the SavingChanges event of the context object. Declaration public void RunBusinessRules() Implements IBusinessRulesController.RunBusinessRules()"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers.FluentAuditTrailExtension.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers.FluentAuditTrailExtension.html",
    "title": "Class FluentAuditTrailExtension | Entity Framework Enterprise Extensions",
    "keywords": "Class FluentAuditTrailExtension Extension methods Inheritance System.Object FluentAuditTrailExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions.Controllers Assembly : cs.temp.dll.dll Syntax public static class FluentAuditTrailExtension Methods UseAuditTrail<T, TEntity>(IBusinessDbContext, String) Extension method to add AuditTrail to a DbContext Declaration public static IBusinessDbContext UseAuditTrail<T, TEntity>(this IBusinessDbContext context, string currentUserId)where T : DbContext Parameters Type Name Description IBusinessDbContext context System.String currentUserId Returns Type Description IBusinessDbContext Type Parameters Name Description T TEntity"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.IBusinessRulesController.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.IBusinessRulesController.html",
    "title": "Interface IBusinessRulesController | Entity Framework Enterprise Extensions",
    "keywords": "Interface IBusinessRulesController Represents a Business Rules Controller Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public interface IBusinessRulesController Methods RunBusinessRules() Handles the SavingChanges event of the context object. Declaration void RunBusinessRules()"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.IdentityBusinessDbContext-1.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.IdentityBusinessDbContext-1.html",
    "title": "Class IdentityBusinessDbContext<TUser> | Entity Framework Enterprise Extensions",
    "keywords": "Class IdentityBusinessDbContext<TUser> Creates a new IdentityDbContext with support to run BusinessControllers Inheritance System.Object IdentityBusinessDbContext<TUser> IdentityBusinessDbContext Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public abstract class IdentityBusinessDbContext<TUser> : IdentityDbContext<TUser>, IBusinessDbContext where TUser : IdentityUser Type Parameters Name Description TUser Constructors IdentityBusinessDbContext() Instances a new DbContext Declaration protected IdentityBusinessDbContext() IdentityBusinessDbContext(DbConnection, Boolean) Instances a new DbContext with a DbConnection Declaration protected IdentityBusinessDbContext(DbConnection dbConnection, bool contextOwnsConnection) Parameters Type Name Description DbConnection dbConnection System.Boolean contextOwnsConnection IdentityBusinessDbContext(String) Instances a new DbContext with a connection name Declaration protected IdentityBusinessDbContext(string connectionName) Parameters Type Name Description System.String connectionName IdentityBusinessDbContext(String, Boolean) Instances a new DbContext with a connection name and flag Declaration protected IdentityBusinessDbContext(string connectionName, bool throwIfV1Schema) Parameters Type Name Description System.String connectionName System.Boolean throwIfV1Schema Methods AddController(IBusinessRulesController) Adds a new BusinessController to the DbContext Declaration public void AddController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller Implements IBusinessDbContext.AddController(IBusinessRulesController) ContainsController(IBusinessRulesController) Checks if a BusinessController exists Declaration public bool ContainsController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller Returns Type Description System.Boolean Implements IBusinessDbContext.ContainsController(IBusinessRulesController) RemoveController(IBusinessRulesController) Removes a new BusinessController to the DbContext Declaration public void RemoveController(IBusinessRulesController controller) Parameters Type Name Description IBusinessRulesController controller Implements IBusinessDbContext.RemoveController(IBusinessRulesController) SaveChanges() Save Changes and run all the business controllers Declaration public override int SaveChanges() Returns Type Description System.Int32 SaveChangesAsync() Save Changes Async and run all the business controllers Declaration public override Task<int> SaveChangesAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > SaveChangesAsync(CancellationToken) Save Changes Async and run all the business controllers Declaration public override Task<int> SaveChangesAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 >"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.JobBase-1.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.JobBase-1.html",
    "title": "Class JobBase<TDbContext> | Entity Framework Enterprise Extensions",
    "keywords": "Class JobBase<TDbContext> Creates a job with multiple running options Inheritance System.Object JobBase <TDbContext, System.Object > JobBase<TDbContext> Inherited Members JobBase<TDbContext, Object>.Context JobBase<TDbContext, Object>.IsRunning JobBase<TDbContext, Object>.DoWork(Object, CancellationToken) JobBase<TDbContext, Object>.BackgroundCondition() JobBase<TDbContext, Object>.RunBackgroundWork(CancellationToken, TimeSpan, Object) JobBase<TDbContext, Object>.RunBackgroundWork(CancellationToken, Object) JobBase<TDbContext, Object>.StartDate JobBase<TDbContext, Object>.EndDate JobBase<TDbContext, Object>.Run(Object) JobBase<TDbContext, Object>.RunAsync(Object, CancellationToken) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public abstract class JobBase<TDbContext> : JobBase<TDbContext, object> where TDbContext : IBusinessDbContext Type Parameters Name Description TDbContext The DbContext type, it must inherent IBusinessDbContext Constructors JobBase(TDbContext) Creates a new Job, you should call this constructor from base method in your implementation class Declaration protected JobBase(TDbContext context) Parameters Type Name Description TDbContext context"
  },
  "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.BusinessRuleAttribute.html": {
    "href": "api/Unosquare.Labs.EntityFramework.EnterpriseExtensions.BusinessRuleAttribute.html",
    "title": "Class BusinessRuleAttribute | Entity Framework Enterprise Extensions",
    "keywords": "Class BusinessRuleAttribute Decorate methods with this attribute to execute business rules that match the following signature: public void MethodName(T entity) Inheritance System.Object BusinessRuleAttribute Namespace : Unosquare.Labs.EntityFramework.EnterpriseExtensions Assembly : cs.temp.dll.dll Syntax public class BusinessRuleAttribute : Attribute Constructors BusinessRuleAttribute(Type, ActionFlags) Specifies the types and actions that a method handles as a business rule Declaration public BusinessRuleAttribute(Type entityType, ActionFlags actionFlags) Parameters Type Name Description Type entityType Type of the entity. ActionFlags actionFlags The action flags the method can handle.. BusinessRuleAttribute(Type[], ActionFlags) Specifies the types and actions that a method handles as a business rule Declaration public BusinessRuleAttribute(Type[] entityTypes, ActionFlags actionFlags) Parameters Type Name Description Type [] entityTypes The entity types the method can handle. ActionFlags actionFlags The action flags the method can handle. BusinessRuleAttribute(ActionFlags) Specifies the types and actions that a method handles as a business rule Declaration public BusinessRuleAttribute(ActionFlags actionFlags) Parameters Type Name Description ActionFlags actionFlags The action flags the method can handle. Properties Action Gets or sets the action flags that the decorated method handles. Declaration public ActionFlags Action { get; protected set; } Property Value Type Description ActionFlags The action. EntityTypes Gets or sets the entity types the decorated method handles. Declaration public Type[] EntityTypes { get; protected set; } Property Value Type Description Type [] The entity types."
  }
}